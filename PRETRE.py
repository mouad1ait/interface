import pandas as pd
import streamlit as st
from datetime import datetime

# --------------------------
# Fonctions utilitaires
# --------------------------

def convertir_dates(df, colonnes_dates):
    """Convertit les colonnes de dates sous forme texte en datetime"""
    for col in colonnes_dates:
        try:
            df[col] = pd.to_datetime(df[col], errors='coerce')
        except:
            st.warning(f"Impossible de convertir la colonne {col}")
    return df

def extraire_date_fabrication(numero):
    """Extrait la date de fabrication √† partir du num√©ro de s√©rie (format mmaaxxx)."""
    try:
        mois = int(numero[:2])
        annee = int("20" + numero[2:4])  # exemple : 25 -> 2025
        return datetime(annee, mois, 1)
    except:
        return None

def ajouter_cle_primaire(df, col_modele, col_numero):
    """Cr√©e une cl√© primaire mod√®le/num√©ro de s√©rie"""
    df["cl√©_produit"] = df[col_modele].astype(str) + "/" + df[col_numero].astype(str)
    return df

def premiere_installation(df, col_cle, col_installation):
    """R√©cup√®re la premi√®re date d‚Äôinstallation pour chaque produit"""
    return df.groupby(col_cle)[col_installation].min().reset_index()

# --------------------------
# Interface Streamlit
# --------------------------

st.title("üßπ Nettoyage des donn√©es - Extraction SIS")

uploaded_file = st.file_uploader("Importer un fichier Excel", type=["xlsx", "csv"])

if uploaded_file:
    # Lecture du fichier
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file, dtype=str)
    else:
        df = pd.read_excel(uploaded_file, dtype=str)
    
    st.write("Aper√ßu des donn√©es import√©es :", df.head())

    # S√©lection des colonnes de dates
    colonnes_dates = st.multiselect("S√©lectionnez les colonnes de dates √† convertir :", df.columns)
    if st.button("Convertir les dates"):
        df = convertir_dates(df, colonnes_dates)
        st.success("‚úÖ Dates converties avec succ√®s")
        st.write(df.head())

    # G√©n√©ration de la date de fabrication
    if "num√©ro_de_s√©rie" in df.columns:
        df["date_fabrication"] = df["num√©ro_de_s√©rie"].apply(extraire_date_fabrication)
        st.success("‚úÖ Date de fabrication extraite")
        st.write(df[["num√©ro_de_s√©rie", "date_fabrication"]].head())

    # Cr√©ation de la cl√© produit
    if "mod√®le" in df.columns and "num√©ro_de_s√©rie" in df.columns:
        df = ajouter_cle_primaire(df, "mod√®le", "num√©ro_de_s√©rie")
        st.success("‚úÖ Cl√© produit g√©n√©r√©e")
        st.write(df[["mod√®le", "num√©ro_de_s√©rie", "cl√©_produit"]].head())

    # Premi√®re installation
    if "cl√©_produit" in df.columns and "date_installation" in df.columns:
        df_install = premiere_installation(df, "cl√©_produit", "date_installation")
        st.success("‚úÖ Premi√®re date d‚Äôinstallation extraite")
        st.write(df_install.head())

    # T√©l√©chargement du fichier nettoy√©
    st.download_button(
        "üì• T√©l√©charger le fichier nettoy√©",
        df.to_csv(index=False).encode("utf-8"),
        "donnees_nettoyees.csv",
        "text/csv"
    )
